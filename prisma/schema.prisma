// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PhoneModel {
  iphonex
  iphone11
  iphone12
  iphone13
  iphone14
  iphone15
  iphone16
}

enum CaseMaterial {
  silicone
  polycarbonate
}

enum CaseFinish {
  smooth
  textured
}

enum CaseColor {
  zinc
  blue
  rose
}

enum OrderStatus {
  fulfilled
  shipped
  awaiting_shipment
}

model Configuration {
  id            String        @id @default(cuid())
  imageUrl      String
  width         Int
  height        Int
  color         CaseColor?
  model         PhoneModel?
  finish        CaseFinish?
  material      CaseMaterial?
  croppedImgUrl String?
  orderId       String?
  order         Order?        @relation(fields: [orderId], references: [id])
  CartItem      CartItem?
  userId        String?       @unique
  user          User?         @relation(fields: [userId], references: [id])
}

model User {
  id            String          @id
  email         String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Order         Order[]
  ShoppingCart  ShoppingCart?
  Configuration Configuration[]
}

model ShippingAddress {
  id         String  @id @default(cuid())
  name       String
  street     String
  city       String
  postalCode String
  country    String
  phone      String?
  orders     Order[]
}

model BillingAddress {
  id         String  @id @default(cuid())
  name       String
  street     String
  city       String
  postalCode String
  country    String
  phone      String?
  orders     Order[]
}

model ShoppingCart {
  id        String     @id @default(cuid())
  userId    String?    @unique
  user      User?      @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
  order     Order?
}

model CartItem {
  id              String        @id @default(cuid())
  name            String?
  singlePrice     Float
  configurationId String        @unique
  configuration   Configuration @relation(fields: [configurationId], references: [id])
  quantity        Int
  shoppingCartId  String
  shoppingCart    ShoppingCart  @relation(fields: [shoppingCartId], references: [id])
}

model Order {
  id             String       @id @default(cuid())
  shoppingCartId String       @unique
  shoppingCart   ShoppingCart @relation(fields: [shoppingCartId], references: [id])
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  totalPrice     Float
  isPaid         Boolean      @default(false)
  status         OrderStatus  @default(awaiting_shipment)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  shippingAddressId String?
  shippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  billingAddressId  String?
  billingAddress    BillingAddress?  @relation(fields: [billingAddressId], references: [id])
  Configuration     Configuration[]
}
