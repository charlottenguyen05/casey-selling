
import { createUploadthing, type FileRouter } from "uploadthing/next";  // Import the 
import { z } from "zod"  // Use for input validation
import sharp from "sharp"  // Use for image processing
import { db } from "@/db";

const f = createUploadthing();


export const ourFileRouter = {
    // Create a file router named imageUploader
    imageUploader: f({ image: { maxFileSize: "4MB" } })  // Accepts only image files with max size of 4MB
        .input(z.object({ configId: z.string().optional() }))  // Input validation: accepts a optional configId
        .middleware(async ({ input }) => {
            // Process the input and return inside metadata
            return { input }  
        })
        // RUN ON YOUR SERVER after the files uploaded (startUpload() is finished)
        .onUploadComplete(async ({ metadata, file }) => {
            // !!! Whatever is returned here is sent to the clientside `onClientUploadComplete` callback
            const configId = metadata.input.configId

            const res = await fetch(file.url)
            const buffer = await res.arrayBuffer()  // Convert the uploaded file to Buffer so that sharp can resize the image

            const imgMetadata = await sharp(buffer).metadata()  // Use sharp to get metadata (dimensions) of uploaded image
            const { width, height } = imgMetadata  // Get the height and width of image

            if (!configId) {
                // If configId isn't existed before, create a table/model named configuration 
                const configuration = await db.configuration.create({
                    data: {
                        imageUrl: file.url,
                        height: height || 500,
                        width: width || 500
                    }
                })
                return { configId: configuration.id }  // Return configId (autogenerated) to the client side
            } else {
                // Update the configuration table/model with the cropped image
                const updatedConfiguration = await db.configuration.update({
                    where: {
                        id: configId
                    },
                    data: {
                        croppedImgUrl: file.url,
                    }
                })
                return { configId: updatedConfiguration.id }
            }
        }),
} satisfies FileRouter;

export type OurFileRouter = typeof ourFileRouter;
